import React, { useEffect, useState } from 'react'
import { firestore } from '/utils/firebaseClient'
import { doc, getDoc } from 'firebase/firestore'
import Page from '../page/Page'
import SignIn from '../account/SignIn'
import { useAuth } from '../contexts/AuthContext'
import LoadingPage from '../page/LoadingPage'

/**
 * This HOC checks that the user is logged into an account which has the admin role, and only serves the wrapped component if this is the case, otherwise showing a log in screen.
 * This is subject to client side manipulation, so should not be relied on for security.  Any sensitive data or abilities must be further secured.
 * - client side they must be accessed from a firestore document that requires the accessing user have the admin role in its access rules
 * - server side they must be behind an api route which requires a firebase authentication token generated by an admin user
 */
const withAdminAuth = (Component) => {
	return (props) => {
		const { user, isAuthLoading } = useAuth()

		const [userIsAdmin, setUserIsAdmin] = useState(null)

		useEffect(() => {
			if (isAuthLoading) {
				return
			}

			const checkAdminRole = async () => {
				try {
					const userDocRef = doc(firestore, 'users', user.uid)
					const docSnap = await getDoc(userDocRef)
					if (docSnap.exists()) {
						const userData = docSnap.data()
						setUserIsAdmin(userData.role === 'admin')
					}
				} catch (error) {
					setUserIsAdmin(false)
					return
				}
			}

			if (user) {
				checkAdminRole()
				return
			} else {
				setUserIsAdmin(false)
			}
		}, [user, isAuthLoading])

		// userIsAdmin starts as null, and will be set to true or false once the existence of a logged in user, and their privileges, have been checked
		if (userIsAdmin === null) {
			return <LoadingPage />
		}

		// If the user is not an admin, show a login page
		if (!userIsAdmin) {
			return (
				<Page title='Admin log in'>
					{!!user && <p>You account is not an admin. If you have an admin account, please log in here:</p>}
					<SignIn />
				</Page>
			)
		}

		// Only allow the requested page for admin users
		return <Component {...props} />
	}
}

export default withAdminAuth
